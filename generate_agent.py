"""
Agent Generator - Create Custom Customer Support Agent from Template

This script generates a customized customer support agent for a specific business
by loading their configuration and creating a RAG knowledge base.

Usage:
    python generate_agent.py --business "electronics_shop"
    python generate_agent.py --config "path/to/config.json"
"""

import json
import os
import sys
import argparse
import shutil
from pathlib import Path


class AgentGenerator:
    """Generate custom agent from business templates"""
    
    def __init__(self, business_folder):
        self.business_folder = business_folder
        self.business_path = Path(f"businesses/{business_folder}")
        self.template_path = Path("template")
        
        # Load configurations
        self.business_config = None
        self.policies = None
        self.products = None
        self.known_issues = None
    
    def validate_templates(self):
        """Check if all required template files exist"""
        required_files = [
            "business_config.json",
            "policies.json",
            "products.json",
            "known_issues.json"
        ]
        
        missing = []
        for file in required_files:
            if not (self.business_path / file).exists():
                missing.append(file)
        
        if missing:
            print(f"‚ùå Missing required files in {self.business_path}:")
            for file in missing:
                print(f"   - {file}")
            print(f"\nüí° Copy template files from 'template/' folder and customize them.")
            return False
        
        return True
    
    def load_configurations(self):
        """Load all configuration files"""
        try:
            with open(self.business_path / "business_config.json") as f:
                self.business_config = json.load(f)
            
            with open(self.business_path / "policies.json") as f:
                self.policies = json.load(f)
            
            with open(self.business_path / "products.json") as f:
                self.products = json.load(f)
            
            with open(self.business_path / "known_issues.json") as f:
                self.known_issues = json.load(f)
            
            return True
        
        except json.JSONDecodeError as e:
            print(f"‚ùå Error parsing JSON: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Error loading configurations: {e}")
            return False
    
    def generate_env_file(self):
        """Generate .env file for this business"""
        env_content = f"""# {self.business_config['business_info']['name']} - Configuration
# Generated by Agent Generator

# ========================================
# AI Configuration (REQUIRED)
# ========================================
OPENROUTER_API_KEY={os.getenv('OPENROUTER_API_KEY', 'your-api-key-here')}

# ========================================
# Business Information
# ========================================
BUSINESS_NAME={self.business_config['business_info']['name']}
BUSINESS_INDUSTRY={self.business_config['business_info']['industry']}
AGENT_NAME={self.business_config['agent_config']['agent_name']}

# ========================================
# Contact Information
# ========================================
BUSINESS_EMAIL={self.business_config['contact_info']['email']}
BUSINESS_PHONE={self.business_config['contact_info']['phone']}
BUSINESS_WHATSAPP={self.business_config['contact_info']['whatsapp']}

# ========================================
# Security
# ========================================
JWT_SECRET={os.getenv('JWT_SECRET', 'generate-a-secure-random-secret')}

# ========================================
# WhatsApp Integration (Optional)
# ========================================
TWILIO_ACCOUNT_SID={os.getenv('TWILIO_ACCOUNT_SID', '')}
TWILIO_AUTH_TOKEN={os.getenv('TWILIO_AUTH_TOKEN', '')}
TWILIO_WHATSAPP_NUMBER={os.getenv('TWILIO_WHATSAPP_NUMBER', '')}

# ========================================
# Server Configuration
# ========================================
API_HOST=0.0.0.0
API_PORT=8000
WHATSAPP_PORT=8001

# ========================================
# Customization
# ========================================
PRIMARY_COLOR={self.business_config['customization']['primary_color']}
SECONDARY_COLOR={self.business_config['customization']['secondary_color']}
"""
        
        env_file = self.business_path / ".env"
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"‚úÖ Generated .env file")
    
    def generate_custom_rag(self):
        """Generate custom RAG system with business data"""
        
        rag_content = f'''"""
Custom RAG System for {self.business_config['business_info']['name']}
Auto-generated from business templates
"""

import sqlite3
import json
from pathlib import Path


class CustomRAGKnowledgeBase:
    """RAG Knowledge Base with business-specific data"""
    
    def __init__(self, db_name="custom_knowledge.db"):
        self.db_name = db_name
        self.business_name = "{self.business_config['business_info']['name']}"
        self.agent_name = "{self.business_config['agent_config']['agent_name']}"
        self._initialize_database()
    
    def _initialize_database(self):
        """Initialize database with business data"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # Create tables
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS policies (
                policy_id TEXT PRIMARY KEY,
                category TEXT,
                title TEXT,
                description TEXT,
                content TEXT
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS products (
                product_id TEXT PRIMARY KEY,
                name TEXT,
                category TEXT,
                description TEXT,
                full_description TEXT,
                specifications TEXT,
                pricing TEXT
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS known_issues (
                issue_id TEXT PRIMARY KEY,
                product_id TEXT,
                product_name TEXT,
                issue_title TEXT,
                severity TEXT,
                status TEXT,
                description TEXT,
                workaround TEXT,
                permanent_fix TEXT
            )
        """)
        
        # Load business data
        self._load_policies(cursor)
        self._load_products(cursor)
        self._load_known_issues(cursor)
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Initialized {{self.business_name}} knowledge base")
    
    def _load_policies(self, cursor):
        """Load policies from configuration"""
        policies = {json.dumps(self.policies['policies'])}
        
        for policy in policies:
            cursor.execute("""
                INSERT OR REPLACE INTO policies VALUES (?, ?, ?, ?, ?)
            """, (
                policy['id'],
                policy['category'],
                policy['title'],
                policy['description'],
                policy['content']
            ))
    
    def _load_products(self, cursor):
        """Load products from configuration"""
        products = {json.dumps(self.products['products'])}
        
        for product in products:
            cursor.execute("""
                INSERT OR REPLACE INTO products VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                product['id'],
                product['name'],
                product['category'],
                product['description'],
                product.get('full_description', ''),
                json.dumps(product.get('specifications', {{}})),
                json.dumps(product.get('pricing', {{}}))
            ))
    
    def _load_known_issues(self, cursor):
        """Load known issues from configuration"""
        issues = {json.dumps(self.known_issues['known_issues'])}
        
        for issue in issues:
            cursor.execute("""
                INSERT OR REPLACE INTO known_issues VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                issue['id'],
                issue['product_id'],
                issue['product_name'],
                issue['issue_title'],
                issue['severity'],
                issue['status'],
                issue['description'],
                issue.get('workaround', ''),
                issue.get('permanent_fix', '')
            ))
    
    def search_policies(self, query):
        """Search policies"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT * FROM policies 
            WHERE category LIKE ? OR title LIKE ? OR content LIKE ?
            LIMIT 5
        """, (f"%{{query}}%", f"%{{query}}%", f"%{{query}}%"))
        
        results = cursor.fetchall()
        conn.close()
        
        return [
            {{
                "policy_id": r[0],
                "category": r[1],
                "title": r[2],
                "description": r[3],
                "content": r[4]
            }}
            for r in results
        ]
    
    def search_products(self, query):
        """Search products"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT * FROM products 
            WHERE name LIKE ? OR category LIKE ? OR description LIKE ?
            LIMIT 5
        """, (f"%{{query}}%", f"%{{query}}%", f"%{{query}}%"))
        
        results = cursor.fetchall()
        conn.close()
        
        return [
            {{
                "product_id": r[0],
                "name": r[1],
                "category": r[2],
                "description": r[3],
                "specifications": json.loads(r[5]) if r[5] else {{}},
                "pricing": json.loads(r[6]) if r[6] else {{}}
            }}
            for r in results
        ]
    
    def get_known_issues(self, product_id=None):
        """Get known issues"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        if product_id:
            cursor.execute("SELECT * FROM known_issues WHERE product_id = ?", (product_id,))
        else:
            cursor.execute("SELECT * FROM known_issues WHERE status != 'resolved' LIMIT 10")
        
        results = cursor.fetchall()
        conn.close()
        
        return [
            {{
                "issue_id": r[0],
                "product_id": r[1],
                "product_name": r[2],
                "issue_title": r[3],
                "severity": r[4],
                "status": r[5],
                "description": r[6],
                "workaround": r[7],
                "permanent_fix": r[8]
            }}
            for r in results
        ]


if __name__ == "__main__":
    # Initialize knowledge base
    kb = CustomRAGKnowledgeBase()
    
    # Test searches
    print("\\n" + "="*70)
    print(f"Testing {{kb.business_name}} Knowledge Base")
    print("="*70)
    
    policies = kb.search_policies("return")
    print(f"\\nFound {{len(policies)}} policies about 'return'")
    
    products = kb.search_products("product")
    print(f"Found {{len(products)}} products")
    
    issues = kb.get_known_issues()
    print(f"Found {{len(issues)}} known issues")
'''
        
        rag_file = self.business_path / "custom_rag.py"
        with open(rag_file, 'w', encoding='utf-8') as f:
            f.write(rag_content)
        
        print(f"‚úÖ Generated custom RAG system")
    
    def copy_core_files(self):
        """Copy core system files that don't need customization"""
        core_files = [
            "api_server.py",
            "whatsapp_integration.py",
            "auth_system.py",
            "agentic_ai.py",
            "migrate_db.py",
            "chat_widget.html"
        ]
        
        for file in core_files:
            if Path(file).exists():
                shutil.copy(file, self.business_path / file)
        
        print(f"‚úÖ Copied core system files")
    
    def generate_readme(self):
        """Generate README for this business"""
        readme_content = f"""# {self.business_config['business_info']['name']} - AI Customer Support

Auto-generated customer support agent for {self.business_config['business_info']['name']}.

## Business Information

- **Name**: {self.business_config['business_info']['name']}
- **Industry**: {self.business_config['business_info']['industry']}
- **Agent Name**: {self.business_config['agent_config']['agent_name']}
- **Website**: {self.business_config['business_info'].get('website', 'N/A')}

## Quick Start

```powershell
# 1. Configure environment
# Edit .env file with your API keys

# 2. Initialize knowledge base
python custom_rag.py

# 3. Start API server
python api_server.py

# 4. Start WhatsApp integration
python whatsapp_integration.py

# 5. Open chat widget
# Open chat_widget.html in browser
```

## Configuration Files

- `business_config.json` - Business details and agent configuration
- `policies.json` - Return policies, warranties, shipping terms
- `products.json` - Product catalog with details
- `known_issues.json` - Known issues and troubleshooting guides

## Features Enabled

"""
        
        for feature, enabled in self.business_config['features'].items():
            emoji = "‚úÖ" if enabled else "‚ùå"
            readme_content += f"- {emoji} {feature.replace('_', ' ').title()}\n"
        
        readme_content += f"""
## Support Channels

"""
        
        for channel, enabled in self.business_config['support_channels'].items():
            emoji = "‚úÖ" if enabled else "‚ùå"
            readme_content += f"- {emoji} {channel.replace('_', ' ').title()}\n"
        
        readme_content += f"""
## Contact Information

- **Email**: {self.business_config['contact_info']['email']}
- **Phone**: {self.business_config['contact_info']['phone']}
- **WhatsApp**: {self.business_config['contact_info']['whatsapp']}
- **Address**: {self.business_config['contact_info']['address']}

## Customization

- **Primary Color**: {self.business_config['customization']['primary_color']}
- **Secondary Color**: {self.business_config['customization']['secondary_color']}

---

Generated by Agent Generator on {Path(__file__).stat().st_mtime}
"""
        
        readme_file = self.business_path / "README.md"
        with open(readme_file, 'w') as f:
            f.write(readme_content)
        
        print(f"‚úÖ Generated README.md")
    
    def generate(self):
        """Generate complete agent setup"""
        print("="*70)
        print(f"ü§ñ Generating Agent for: {self.business_folder}")
        print("="*70)
        print()
        
        # Validate
        if not self.validate_templates():
            return False
        
        # Load configurations
        if not self.load_configurations():
            return False
        
        print(f"üìã Business: {self.business_config['business_info']['name']}")
        print(f"ü§ñ Agent: {self.business_config['agent_config']['agent_name']}")
        print(f"üè¢ Industry: {self.business_config['business_info']['industry']}")
        print()
        
        # Generate files
        print("Generating files...")
        self.generate_env_file()
        self.generate_custom_rag()
        self.copy_core_files()
        self.generate_readme()
        
        print()
        print("="*70)
        print(f"‚úÖ Agent Generated Successfully!")
        print("="*70)
        print()
        print(f"üìÅ Location: {self.business_path}")
        print()
        print("üöÄ Next Steps:")
        print(f"   1. cd {self.business_path}")
        print(f"   2. Edit .env file with your API keys")
        print(f"   3. python custom_rag.py (initialize knowledge base)")
        print(f"   4. python api_server.py (start server)")
        print()
        
        return True


def main():
    parser = argparse.ArgumentParser(description="Generate custom customer support agent")
    parser.add_argument("--business", required=True, help="Business folder name")
    
    args = parser.parse_args()
    
    generator = AgentGenerator(args.business)
    success = generator.generate()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
